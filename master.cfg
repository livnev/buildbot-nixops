#name -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
import os

TIMEOUT = 14400
BUILDBOT_SIGKILL_WAIT = 60

var_dapptools         = os.environ['DAPPTOOLS']
var_external_domain   = os.environ['BUILDBOT_EXTERNAL_DOMAIN']
var_klab_webproof_dir = os.environ['KLAB_WEBPROOF_DIR']
var_klab_report_dir   = os.environ['KLAB_REPORT_DIR']
var_klab_path         = os.environ['KLAB_PATH']
var_klab_persistent   = os.environ['KLAB_PERSISTENT_DIR']
nixpkgs = "nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/nixos-19.03.tar.gz"

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### MACROS/DSL

from buildbot.plugins import steps, util

def fetch(repo):
    return steps.Git( name             = util.Interpolate('fetch %(prop:branch)s %(prop:revision)s')
                    , mode             = 'full'
                    , method           = util.Interpolate('%(prop:fetch_method:-fresh)s')
                    , repourl          = repos[repo]['url']
                    , haltOnFailure    = True
                    , clobberOnFailure = True
                    )

def make(target, name=None, timeout=TIMEOUT, haltOnFailure=True, alwaysRun=False, persistDirs=False, persistEVMS=True, persistPrefix=True, nixShell=False):
    if name is None:
        name = target[0]
    if persistDirs:
        klab_out = {'KLAB_OUT': ["/home/bbworker/persistent/klab_out"]}
        tmpdir = ["/home/bbworker/persistent/klab_tmp"]
    else:
        klab_out = {}
        tmpdir = ["/tmp/"]
    if persistEVMS:
        evmsPath = ["/home/bbworker/persistent/evm-semantics"]
    else:
        evmsPath = ["./evm-semantics"]
    if persistPrefix:
        prefix = ["/home/bbworker/local"]
    else:
        prefix = ["/home/bbworker/local-tmp"]
    if nixShell:
        command = "nix-shell --command 'make {}' ".format(' '.join(target))
    else:
        command = 'make {}'.format(' '.join(target))
    return steps.ShellCommand( name            = name
                             , description     = ''
                             , descriptionDone = ''
                             , command         = command
                             , haltOnFailure   = haltOnFailure
                             , alwaysRun       = alwaysRun
                             , timeout         = None
                             , maxTime         = timeout
                             , sigtermTime     = BUILDBOT_SIGKILL_WAIT
                             , env             = dict({
                               'PATH'              : [p + "/bin" for p in prefix] + ["/home/bbworker/local/bin", "${PATH}"]
                             , 'NIX_PATH'          : nixpkgs
                             , 'TERM'              : "xterm"
                             , 'DAPPTOOLS'         : var_dapptools
                             , 'KLAB_PATH'         : var_klab_path
                             , 'KLAB_EVMS_PATH'    : evmsPath
                             , 'KLAB_REPORT_DIR'   : var_klab_report_dir
                             , 'KLAB_WEBPROOF_DIR' : var_klab_webproof_dir
                             , 'PREFIX'            : prefix
                             }, **klab_out)
                             )

def shell(command, name=None):
    if name is None:
        name = command[0]
    return steps.Compile( name            = name
                        , description     = ''
                        , descriptionDone = ''
                        , command         = command
                        )

def make_klab_haskell_deps():
    return steps.ShellCommand( name            = 'build klab - haskell deps'
                             , description     = ''
                             , descriptionDone = ''
                             , command         = "nix-shell --command 'make deps-haskell'"
                             , workdir         = var_klab_path
                             , haltOnFailure   = True
                             , env             = {
                               'NIX_PATH'          : nixpkgs
                             , 'TERM'              : "xterm"
                             }
                             )
def checkout_klab():
    return steps.ShellCommand( name            = 'get the newest klab master'
                             , description     = ''
                             , descriptionDone = ''
                             , command         = "git fetch && git reset --hard origin/master"
                             , workdir         = var_klab_path
                             , haltOnFailure   = True
                             , env             = {
                               'NIX_PATH'          : nixpkgs
                             , 'TERM'              : "xterm"
                             }
                             )
def clean_klab():
    return steps.ShellCommand( name            = 'clean klab'
                             , description     = ''
                             , descriptionDone = ''
                             , command         = "nix-shell --command 'make clean'"
                             , workdir         = var_klab_path
                             , haltOnFailure   = True
                             , env             = {
                               'NIX_PATH'          : nixpkgs
                             , 'TERM'              : "xterm"
                             }
                             )
def make_klab_deps():
    return steps.ShellCommand( name            = 'build klab'
                             , description     = ''
                             , descriptionDone = ''
                             , command         = "nix-shell --command 'make deps'"
                             , workdir         = var_klab_path
                             , haltOnFailure   = True
                             , env             = {
                               'NIX_PATH'          : nixpkgs
                             , 'TERM'              : "xterm"
                             }
                             )
def prove_all(project_name, timeout=TIMEOUT, foreignNixShell=None):
    if foreignNixShell:
        cmd = "nix-shell --command 'klab prove-all' " + foreignNixShell
    else:
        cmd = "nix-shell --command 'klab prove-all' "
    return steps.ShellCommand( name            = 'klab prove-all'
                             , description     = ''
                             , descriptionDone = ''
                             , timeout         = None
                             , maxTime         = timeout
                             , sigtermTime     = BUILDBOT_SIGKILL_WAIT
                             , env             = dict({
                                   'TERM'              : "xterm"
                                 , 'PATH'              : [var_klab_path + "/bin", "${PATH}"]
                                 , 'NIX_PATH'          : nixpkgs
                                 , 'KLAB_PATH'         : var_klab_path
                                 , 'KLAB_EVMS_PATH'    : var_klab_path + "/evm-semantics"
                                 , 'KLAB_REPORT_DIR'   : var_klab_report_dir
                                 , 'KLAB_WEBPROOF_DIR' : var_klab_webproof_dir
                                 , 'KLAB_OUT'          : var_klab_persistent + "/" + project_name
                                 , 'THREADS'           : "20"
                             })
                             , command         = cmd
                             , haltOnFailure   = True
                             )


def needsRebasedOn(branch):
    return steps.ShellCommand( name            = 'branch based on: ' + branch
                             , description     = ''
                             , descriptionDone = ''
                             , command         = ['git', 'rebased-on', branch]
                             , haltOnFailure   = True
                             )

def flatten(lls):
    return [ i for ls in lls
               for i  in ls ]

####### REPOSITORIES
# n.b. that semantically these aren't the repositories, they are a list of builders to autogenerate

# klab-repos = {
#     'k-dss': {
#
#         }
#     }

repos = {
    'klab' :  {
          'url': 'https://github.com/dapphub/klab.git'
        , 'steps':   [
              needsRebasedOn('origin/master')
            , make(['clean'], nixShell=True)
            , make(['deps'], nixShell=True)
            , make(['deps-haskell'], nixShell=True)
            , make(['link'], persistPrefix=False, nixShell=True)
            , make(['test', '-j2'], persistEVMS=False, persistPrefix=False, nixShell=True)
            ]
        , 'delay':   10
        , 'worker':  'FILLME'
        , 'project': 'dapphub/klab'
        , 'token':   'FILLME'
        },
    'dapp-ci': {
          'url': 'https://github.com/dapphub/dapp.ci.git'
        , 'steps':   [
            make(['all'], nixShell=True)
            ]
        , 'delay':   10
        , 'worker':  'FILLME'
        , 'project': 'dapphub/dapp.ci'
        , 'token':   'FILLME'
        },
    'proof-dapp-ci': {
          'url': 'https://github.com/dapphub/proof.dapp.ci.git'
        , 'steps':   [
              needsRebasedOn('origin/master')
            , make(['all'], nixShell=True)
            ]
        , 'delay':   10
        , 'worker':  'FILLME'
        , 'project': 'dapphub/proof.dapp.ci'
        , 'token':   'FILLME'
        },
    'k-osm' : { 'url': 'https://github.com/dapphub/k-osm.git'
        , 'steps':   [
              needsRebasedOn('origin/master')
            , checkout_klab()
            , clean_klab()
            , make_klab_deps()
            , make_klab_haskell_deps()
            , make(['dapp'], nixShell=True)
            , prove_all("k-osm")
            ]
        , 'delay':   10
        , 'worker':  'FILLME'
        , 'project': 'dapphub/k-osm'
        , 'token':   'FILLME'
        },
    'multipleCalls' : { 'url': 'https://github.com/dapphub/klab-multipleCalls.git'
        , 'steps':   [
              needsRebasedOn('origin/master')
            , checkout_klab()
            , clean_klab()
            , make_klab_deps()
            , make_klab_haskell_deps()
            , make(['dapp'], nixShell=True)
            , prove_all("multipeCalls")
            ]
        , 'delay':   10
        , 'worker':  'sisyphus'
        , 'project': 'dapphub/klab-multipleCalls'
        , 'token':   'FILLME'
        },

    }

####### WORKERS

# The 'workers' list defines the set of recognized buildworkers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# workername and password must be configured on the worker.

from buildbot.plugins import worker

c['workers'] = [ worker.Worker("FILLME", "FILLME", max_builds=1)
               ]

# 'protocols' contains information about protocols which master will use for
# communicating with workers.
# You must define at least 'port' option that workers could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildworkers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.plugins           import schedulers
from buildbot.schedulers.filter import ChangeFilter

c['schedulers'] = flatten([
        ## SCHEDULER FOR PULL REQUESTS
        [ schedulers.AnyBranchScheduler( name            = repo
            , builderNames    = [repo]
            , change_filter   = ChangeFilter(project = repos[repo]['project'])
            , treeStableTimer = repos[repo]['delay'] + 5
            )

        ## SCHEDULER FOR TRIGGERING MANUAL BUILDS VIA WEB INTERFACE
        , schedulers.ForceScheduler( name         = repo + "_force"
            , builderNames = [repo]
            , properties   = [ util.ChoiceStringParameter( name    = 'fetch_method'
                , label   = 'Fetch method'
                , choices = [ 'fresh' , 'clobber' ]
                , default = 'fresh'
                )
                ]
            )
        ]
        for repo in repos
    ])

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

def defaultBuildFactory(repo):
    return util.BuildFactory([ fetch(repo) ] + repos[repo]['steps'])

c['builders'] = flatten([
        ## MAIN TESTER FOR REPO
        [ util.BuilderConfig( name        = repo
                            , workernames = repos[repo]['worker']
                            , factory     = defaultBuildFactory(repo)
                            )
        ]
    for repo in repos ])


####### WEBSITE CONFIGURATION

c['www'] = { 'port'    : 8010
           , 'plugins' : { 'waterfall_view' : True
                         , 'grid_view'      : True
                         , 'console_view'   : True
                         }
           , 'change_hook_dialects' : { 'github' : { 'secret' : 'FILLME'
                                                   , 'strict' : True
                                                   }
                                      }
           , 'auth'  : util.GitHubAuth('FILLME', 'FILLME', apiVersion=4, getTeamsMembership=True)
           , 'authz' : util.Authz( roleMatchers = [ util.RolesFromGroups() ]
                                 , allowRules   = [ util.AnyControlEndpointMatcher(role = "FILLME") ]
                                 )
           }

####### REPORT TARGETS

from buildbot.plugins import reporters

c['services'] = [
    reporters.GitHubStatusPush( name             = ('GitHubStatus_' + repo)
                              , token            = repos[repo]['token']
                              , context          = util.Interpolate("buildbot/%(prop:buildername)s")
                              , startDescription = 'Build started.'
                              , endDescription   = 'Build done.'
                              , builders         =  [repo]
                              )
    for repo in repos if 'token' in repos[repo]
]

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = var_external_domain
c['titleURL'] = var_external_domain
#c['buildbotURL'] = "https://buildbot.dapp.ci/"
c['buildbotURL'] = "https://" + var_external_domain + "/"

####### USAGE REPORTS

# Only report basic information to buildbot.net: versions, platform and plugins used.

c['buildbotNetUsageData'] = 'basic'


####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
